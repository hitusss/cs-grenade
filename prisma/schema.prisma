// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  image       UserImage?
  password    Password?
  roles       Role[]
  sessions    Session[]
  connections Connection[]

  notifications Notification[]

  favorites      Favorite[]
  tickets        Ticket[]
  ticketMessages TicketMessage[]

  maps               Map[]
  destinations       Destination[]
  destinationChanges DestinationChanges[]
  grenades           Grenade[]
  grenadeChanges     GrenadeChanges[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserImage {
  id          String @id @default(cuid())
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Notification {
  id String @id @default(cuid())

  title       String
  description String?
  redirectTo  String?

  seen Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Map {
  name     String  @id
  label    String
  isActive Boolean @default(true)

  image MapImage?
  logo  MapLogo?
  radar MapRadar?

  destinations Destination[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  grenade Grenade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MapImage {
  id          String @id @default(cuid())
  contentType String
  blob        Bytes

  map     Map    @relation(fields: [mapName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  mapName String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MapLogo {
  id          String @id @default(cuid())
  contentType String
  blob        Bytes

  map     Map    @relation(fields: [mapName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  mapName String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MapRadar {
  id          String @id @default(cuid())
  contentType String
  blob        Bytes

  map     Map    @relation(fields: [mapName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  mapName String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Destination {
  id String @id @default(cuid())

  verified Boolean @default(false)

  map     Map    @relation(fields: [mapName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  mapName String

  team String
  type String

  x String
  y String

  name String

  grenades Grenade[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  DestinationChanges DestinationChanges[]

  @@unique([mapName, team, type, x, y])
}

model DestinationChanges {
  id String @id @default(cuid())

  name String

  x String
  y String

  destination Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  destinationId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grenade {
  id String @id @default(cuid())

  verified Boolean @default(false)

  map     Map    @relation(fields: [mapName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  mapName String

  destination   Destination @relation(fields: [destinationId], references: [id])
  destinationId String

  team String
  type String

  x String
  y String

  name        String
  description String?

  images GrenadeImage[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  grenadeChanges GrenadeChanges?

  favorites Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GrenadeChanges {
  id String @id @default(cuid())

  name        String
  description String?

  x String
  y String

  grenadeImageChanges GrenadeImageChanges[]

  grenade   Grenade @relation(fields: [grenadeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grenadeId String  @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GrenadeImage {
  id          String @id @default(cuid())
  contentType String
  blob        Bytes

  order String

  description String?

  grenade   Grenade @relation(fields: [grenadeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grenadeId String

  grenadeImageChanges GrenadeImageChanges?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GrenadeImageChanges {
  id String @id @default(cuid())

  grenadeImage   GrenadeImage? @relation(fields: [grenadeImageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grenadeImageId String?       @unique

  delete Boolean @default(false)

  contentType String?
  blob        Bytes?

  order String?

  description String?

  grenade   GrenadeChanges? @relation(fields: [grenadeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grenadeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id String @id @default(cuid())

  grenade   Grenade @relation(fields: [grenadeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grenadeId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([grenadeId, userId])
}

model Ticket {
  id       String          @id @default(cuid())
  open     Boolean         @default(true)
  title    String
  messages TicketMessage[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketMessage {
  id String @id @default(cuid())

  message String
  images  TicketImage[]

  isAdmin Boolean @default(false)
  seen    Boolean @default(false)

  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ticketId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketImage {
  id          String @id @default(cuid())
  contentType String
  blob        Bytes

  order String

  ticketMessage   TicketMessage @relation(fields: [ticketMessageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ticketMessageId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
